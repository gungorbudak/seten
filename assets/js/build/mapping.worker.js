!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="/~sysbio/seten/assets/js/build/",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";function getGeneScore(scores,method){if(1==scores.length)return scores[0];var m="undefined"!=typeof method?method:"max";return"max"==m?jStat.max(scores):"mean"==m?jStat.mean(scores):"median"==m?jStat.median(scores):"min"==m?jStat.min(scores):"sum"==m?jStat.sum(scores):void 0}function getMapping(organism){var request=new XMLHttpRequest,mapping={},c=0;if(request.open("GET",resourcesDir+"/mappings/"+organism+".json",!1),request.send(null),200===request.status){var data=JSON.parse(request.responseText);data.forEach(function(d){""!=d.symbol&&(mapping.hasOwnProperty(d.chrName)||(mapping[d.chrName]=[]),mapping[d.chrName].push(d),c++)}),console.log("[mappingWorker] Got "+c+" mappings")}return mapping}function getGenes(mapping,chrName,start,end){var m=mapping,c=chrName.toUpperCase(),s=parseInt(start),e=parseInt(end),result=[];return c.indexOf("CHR")||(c=c.replace(/CHR/g,"")),"M"==c&&(c="MT"),m.hasOwnProperty(c)&&(result=m[c].filter(function(el){return el.start<e&&el.end>s})),result}function getScoresFromFileBedFile(rows,organism){var cols,genes,mapping=getMapping(organism),scores={};return rows.forEach(function(row){cols=row.split(/\s/),genes=getGenes(mapping,cols[0],cols[1],cols[2]),genes.length>0&&genes.forEach(function(gene){scores.hasOwnProperty(gene.symbol)||(scores[gene.symbol]=[]),scores[gene.symbol].push(parseFloat(cols[4]))})}),scores}function getScoresFromTwoColumnFile(rows){var cols,scores={};return rows.forEach(function(row){cols=row.split(/\s/),scores.hasOwnProperty(cols[0])||(scores[cols[0]]=[]),scores[cols[0]].push(parseFloat(cols[1]))}),scores}importScripts("../libs/jstat.js");var development=!1,resourcesDir=development?"/assets/resources":"/~sysbio/seten/assets/resources";onmessage=function(e){var reader,t1,t0=(new Date).getTime(),organism=e.data.organism;if("undefined"!=typeof FileReader)reader=new FileReader,reader.onload=function(e){getGeneScores(e.target.result,organism)},reader.readAsText(e.data.file);else{reader=new FileReaderSync;var content=reader.readAsText(e.data.file);getGeneScores(content,organism)}var getGeneScores=function(content,organism){var scores,rows=content.trim().split(/\r?\n/),colSize=rows[0].split(/\s/).length,geneScores=[];scores=colSize>2?getScoresFromFileBedFile(rows,organism):getScoresFromTwoColumnFile(rows);for(var gene in scores)geneScores.push({gene:gene,score:getGeneScore(scores[gene])});colSize>2&&console.log("[mappingWorker] Got "+rows.length+" binding events"),console.log("[mappingWorker] Got "+geneScores.length+" gene level scores"),t1=(new Date).getTime(),console.log("[mappingWorker] Did mapping in "+(t1-t0)/1e3+" seconds"),postMessage(geneScores)}}}]);